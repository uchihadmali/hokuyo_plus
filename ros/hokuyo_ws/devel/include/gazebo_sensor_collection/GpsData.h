// Generated by gencpp from file gazebo_sensor_collection/GpsData.msg
// DO NOT EDIT!


#ifndef GAZEBO_SENSOR_COLLECTION_MESSAGE_GPSDATA_H
#define GAZEBO_SENSOR_COLLECTION_MESSAGE_GPSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gazebo_sensor_collection/DataXYZ.h>
#include <gazebo_sensor_collection/DataXYZ.h>

namespace gazebo_sensor_collection
{
template <class ContainerAllocator>
struct GpsData_
{
  typedef GpsData_<ContainerAllocator> Type;

  GpsData_()
    : stamp()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , reference_latitude(0.0)
    , reference_longitude(0.0)
    , reference_altitude(0.0)
    , reference_heading(0.0)
    , velocity()
    , covariance()
    , covariance_type(0)
    , service(0)
    , status(0)  {
    }
  GpsData_(const ContainerAllocator& _alloc)
    : stamp()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , reference_latitude(0.0)
    , reference_longitude(0.0)
    , reference_altitude(0.0)
    , reference_heading(0.0)
    , velocity(_alloc)
    , covariance(_alloc)
    , covariance_type(0)
    , service(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _reference_latitude_type;
  _reference_latitude_type reference_latitude;

   typedef double _reference_longitude_type;
  _reference_longitude_type reference_longitude;

   typedef double _reference_altitude_type;
  _reference_altitude_type reference_altitude;

   typedef double _reference_heading_type;
  _reference_heading_type reference_heading;

   typedef  ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator>  _covariance_type;
  _covariance_type covariance;

   typedef uint8_t _covariance_type_type;
  _covariance_type_type covariance_type;

   typedef uint16_t _service_type;
  _service_type service;

   typedef int8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> const> ConstPtr;

}; // struct GpsData_

typedef ::gazebo_sensor_collection::GpsData_<std::allocator<void> > GpsData;

typedef boost::shared_ptr< ::gazebo_sensor_collection::GpsData > GpsDataPtr;
typedef boost::shared_ptr< ::gazebo_sensor_collection::GpsData const> GpsDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_sensor_collection::GpsData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_sensor_collection::GpsData_<ContainerAllocator1> & lhs, const ::gazebo_sensor_collection::GpsData_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.reference_latitude == rhs.reference_latitude &&
    lhs.reference_longitude == rhs.reference_longitude &&
    lhs.reference_altitude == rhs.reference_altitude &&
    lhs.reference_heading == rhs.reference_heading &&
    lhs.velocity == rhs.velocity &&
    lhs.covariance == rhs.covariance &&
    lhs.covariance_type == rhs.covariance_type &&
    lhs.service == rhs.service &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_sensor_collection::GpsData_<ContainerAllocator1> & lhs, const ::gazebo_sensor_collection::GpsData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_sensor_collection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8616250764453b7cd4fbceca47db6ba";
  }

  static const char* value(const ::gazebo_sensor_collection::GpsData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8616250764453b7ULL;
  static const uint64_t static_value2 = 0xcd4fbceca47db6baULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_sensor_collection/GpsData";
  }

  static const char* value(const ::gazebo_sensor_collection::GpsData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"float64 reference_latitude\n"
"float64 reference_longitude\n"
"float64 reference_altitude\n"
"float64 reference_heading\n"
"DataXYZ velocity\n"
"DataXYZ covariance\n"
"uint8 covariance_type\n"
"uint16 service\n"
"int8 status\n"
"\n"
"================================================================================\n"
"MSG: gazebo_sensor_collection/DataXYZ\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gazebo_sensor_collection::GpsData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.reference_latitude);
      stream.next(m.reference_longitude);
      stream.next(m.reference_altitude);
      stream.next(m.reference_heading);
      stream.next(m.velocity);
      stream.next(m.covariance);
      stream.next(m.covariance_type);
      stream.next(m.service);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_sensor_collection::GpsData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_sensor_collection::GpsData_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "reference_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.reference_latitude);
    s << indent << "reference_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.reference_longitude);
    s << indent << "reference_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.reference_altitude);
    s << indent << "reference_heading: ";
    Printer<double>::stream(s, indent + "  ", v.reference_heading);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "covariance: ";
    s << std::endl;
    Printer< ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator> >::stream(s, indent + "  ", v.covariance);
    s << indent << "covariance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.covariance_type);
    s << indent << "service: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.service);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_SENSOR_COLLECTION_MESSAGE_GPSDATA_H
