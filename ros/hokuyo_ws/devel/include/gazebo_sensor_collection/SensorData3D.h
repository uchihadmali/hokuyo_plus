// Generated by gencpp from file gazebo_sensor_collection/SensorData3D.msg
// DO NOT EDIT!


#ifndef GAZEBO_SENSOR_COLLECTION_MESSAGE_SENSORDATA3D_H
#define GAZEBO_SENSOR_COLLECTION_MESSAGE_SENSORDATA3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gazebo_sensor_collection/DataXYZ.h>
#include <gazebo_sensor_collection/DataXYZ.h>
#include <gazebo_sensor_collection/DataXYZ.h>

namespace gazebo_sensor_collection
{
template <class ContainerAllocator>
struct SensorData3D_
{
  typedef SensorData3D_<ContainerAllocator> Type;

  SensorData3D_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , covariance()
    , bias()
    , offset()  {
    }
  SensorData3D_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , covariance(_alloc)
    , bias(_alloc)
    , offset(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef  ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator>  _covariance_type;
  _covariance_type covariance;

   typedef  ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator>  _bias_type;
  _bias_type bias;

   typedef  ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator>  _offset_type;
  _offset_type offset;





  typedef boost::shared_ptr< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> const> ConstPtr;

}; // struct SensorData3D_

typedef ::gazebo_sensor_collection::SensorData3D_<std::allocator<void> > SensorData3D;

typedef boost::shared_ptr< ::gazebo_sensor_collection::SensorData3D > SensorData3DPtr;
typedef boost::shared_ptr< ::gazebo_sensor_collection::SensorData3D const> SensorData3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator1> & lhs, const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.covariance == rhs.covariance &&
    lhs.bias == rhs.bias &&
    lhs.offset == rhs.offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator1> & lhs, const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_sensor_collection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "513fdfd0e6bee20a157cc975187a992e";
  }

  static const char* value(const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x513fdfd0e6bee20aULL;
  static const uint64_t static_value2 = 0x157cc975187a992eULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_sensor_collection/SensorData3D";
  }

  static const char* value(const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"DataXYZ covariance\n"
"DataXYZ bias\n"
"DataXYZ offset\n"
"\n"
"================================================================================\n"
"MSG: gazebo_sensor_collection/DataXYZ\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.covariance);
      stream.next(m.bias);
      stream.next(m.offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorData3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_sensor_collection::SensorData3D_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "covariance: ";
    s << std::endl;
    Printer< ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator> >::stream(s, indent + "  ", v.covariance);
    s << indent << "bias: ";
    s << std::endl;
    Printer< ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator> >::stream(s, indent + "  ", v.bias);
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::gazebo_sensor_collection::DataXYZ_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_SENSOR_COLLECTION_MESSAGE_SENSORDATA3D_H
