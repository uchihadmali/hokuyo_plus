# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gazebo_sensor_collection/ImuData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gazebo_sensor_collection.msg
import genpy

class ImuData(genpy.Message):
  _md5sum = "4dd12c4714f677eadc16e5447a415b6a"
  _type = "gazebo_sensor_collection/ImuData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
SensorData3D accel
SensorData3D gyro
OrientationSensorData orientation

================================================================================
MSG: gazebo_sensor_collection/SensorData3D
float64 x
float64 y
float64 z
DataXYZ covariance
DataXYZ bias
DataXYZ offset

================================================================================
MSG: gazebo_sensor_collection/DataXYZ
float64 x
float64 y
float64 z

================================================================================
MSG: gazebo_sensor_collection/OrientationSensorData
float64 x
float64 y
float64 z
float64 w
EulerData covariance
QuaternionData bias

================================================================================
MSG: gazebo_sensor_collection/EulerData
float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: gazebo_sensor_collection/QuaternionData
float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['stamp','accel','gyro','orientation']
  _slot_types = ['time','gazebo_sensor_collection/SensorData3D','gazebo_sensor_collection/SensorData3D','gazebo_sensor_collection/OrientationSensorData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,accel,gyro,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.accel is None:
        self.accel = gazebo_sensor_collection.msg.SensorData3D()
      if self.gyro is None:
        self.gyro = gazebo_sensor_collection.msg.SensorData3D()
      if self.orientation is None:
        self.orientation = gazebo_sensor_collection.msg.OrientationSensorData()
    else:
      self.stamp = genpy.Time()
      self.accel = gazebo_sensor_collection.msg.SensorData3D()
      self.gyro = gazebo_sensor_collection.msg.SensorData3D()
      self.orientation = gazebo_sensor_collection.msg.OrientationSensorData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I35d().pack(_x.stamp.secs, _x.stamp.nsecs, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel.covariance.x, _x.accel.covariance.y, _x.accel.covariance.z, _x.accel.bias.x, _x.accel.bias.y, _x.accel.bias.z, _x.accel.offset.x, _x.accel.offset.y, _x.accel.offset.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.gyro.covariance.x, _x.gyro.covariance.y, _x.gyro.covariance.z, _x.gyro.bias.x, _x.gyro.bias.y, _x.gyro.bias.z, _x.gyro.offset.x, _x.gyro.offset.y, _x.gyro.offset.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.orientation.covariance.roll, _x.orientation.covariance.pitch, _x.orientation.covariance.yaw, _x.orientation.bias.x, _x.orientation.bias.y, _x.orientation.bias.z, _x.orientation.bias.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.accel is None:
        self.accel = gazebo_sensor_collection.msg.SensorData3D()
      if self.gyro is None:
        self.gyro = gazebo_sensor_collection.msg.SensorData3D()
      if self.orientation is None:
        self.orientation = gazebo_sensor_collection.msg.OrientationSensorData()
      end = 0
      _x = self
      start = end
      end += 288
      (_x.stamp.secs, _x.stamp.nsecs, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel.covariance.x, _x.accel.covariance.y, _x.accel.covariance.z, _x.accel.bias.x, _x.accel.bias.y, _x.accel.bias.z, _x.accel.offset.x, _x.accel.offset.y, _x.accel.offset.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.gyro.covariance.x, _x.gyro.covariance.y, _x.gyro.covariance.z, _x.gyro.bias.x, _x.gyro.bias.y, _x.gyro.bias.z, _x.gyro.offset.x, _x.gyro.offset.y, _x.gyro.offset.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.orientation.covariance.roll, _x.orientation.covariance.pitch, _x.orientation.covariance.yaw, _x.orientation.bias.x, _x.orientation.bias.y, _x.orientation.bias.z, _x.orientation.bias.w,) = _get_struct_2I35d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I35d().pack(_x.stamp.secs, _x.stamp.nsecs, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel.covariance.x, _x.accel.covariance.y, _x.accel.covariance.z, _x.accel.bias.x, _x.accel.bias.y, _x.accel.bias.z, _x.accel.offset.x, _x.accel.offset.y, _x.accel.offset.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.gyro.covariance.x, _x.gyro.covariance.y, _x.gyro.covariance.z, _x.gyro.bias.x, _x.gyro.bias.y, _x.gyro.bias.z, _x.gyro.offset.x, _x.gyro.offset.y, _x.gyro.offset.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.orientation.covariance.roll, _x.orientation.covariance.pitch, _x.orientation.covariance.yaw, _x.orientation.bias.x, _x.orientation.bias.y, _x.orientation.bias.z, _x.orientation.bias.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.accel is None:
        self.accel = gazebo_sensor_collection.msg.SensorData3D()
      if self.gyro is None:
        self.gyro = gazebo_sensor_collection.msg.SensorData3D()
      if self.orientation is None:
        self.orientation = gazebo_sensor_collection.msg.OrientationSensorData()
      end = 0
      _x = self
      start = end
      end += 288
      (_x.stamp.secs, _x.stamp.nsecs, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel.covariance.x, _x.accel.covariance.y, _x.accel.covariance.z, _x.accel.bias.x, _x.accel.bias.y, _x.accel.bias.z, _x.accel.offset.x, _x.accel.offset.y, _x.accel.offset.z, _x.gyro.x, _x.gyro.y, _x.gyro.z, _x.gyro.covariance.x, _x.gyro.covariance.y, _x.gyro.covariance.z, _x.gyro.bias.x, _x.gyro.bias.y, _x.gyro.bias.z, _x.gyro.offset.x, _x.gyro.offset.y, _x.gyro.offset.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.orientation.covariance.roll, _x.orientation.covariance.pitch, _x.orientation.covariance.yaw, _x.orientation.bias.x, _x.orientation.bias.y, _x.orientation.bias.z, _x.orientation.bias.w,) = _get_struct_2I35d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I35d = None
def _get_struct_2I35d():
    global _struct_2I35d
    if _struct_2I35d is None:
        _struct_2I35d = struct.Struct("<2I35d")
    return _struct_2I35d
